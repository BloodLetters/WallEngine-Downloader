name: Build and Package WallE-Downloader

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller rarfile

    - name: Download Release.rar from DepotDownloaderMod
      run: |
        curl -L -o Release.rar "https://github.com/SteamAutoCracks/DepotDownloaderMod/releases/latest/download/Release.rar"

    - name: Extract Release.rar
      run: |
        mkdir extracted
        tar -xf Release.rar -C extracted || powershell -Command "Expand-Archive -Path Release.rar -DestinationPath extracted"

    - name: Copy DepotDownloaderMod files to DepotDownloaderMod/
      shell: bash
      run: |
        set -e
        DEPOT=$(find extracted -name "DepotDownloaderMod.exe" | head -n 1)
        if [ -z "$DEPOT" ]; then
          echo "DepotDownloaderMod.exe not found!"
          exit 1
        fi
        DEPOT_DIR=$(dirname "$DEPOT")
        mkdir -p DepotDownloaderMod
        cp -r "$DEPOT_DIR"/* DepotDownloaderMod/

    - name: Compile app.py to app.exe
      run: |
        pyinstaller --clean --noconsole --onefile --icon=Assets/icon.ico --name WallEngine app.py

    - name: Prepare WallE-Downloader.zip
      run: |
        copy dist\WallEngine.exe .\
        powershell -Command "Compress-Archive -Path WallEngine.exe, DepotDownloaderMod, Assets -DestinationPath WallE-Downloader.zip"

    # - name: Upload artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: WallE-Downloader
    #     path: WallE-Downloader.zip

    - name: Extract APP_VERSION from app.py
      id: get_version
      run: |
        $version = Select-String -Path "app.py" -Pattern 'APP_VERSION\s*=\s*"([^"]+)"' | ForEach-Object { $_.Matches[0].Groups[1].Value }
        echo "APP_VERSION=$version" >> $env:GITHUB_ENV

    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v1
      with:
        name: WallE-Downloader v${{ env.APP_VERSION }}
        tag_name: v${{ env.APP_VERSION }}
        files: WallE-Downloader.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}